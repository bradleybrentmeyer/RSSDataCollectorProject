package dataCollection;

public class Threads {

	Threads(){
		
	}
	
	public static int count(String groupName){ 
		
		int cnt = 0;
		ThreadGroup cg = Thread.currentThread().getThreadGroup();
		int numThreads = cg.activeCount();
		Thread[] threads = new Thread[numThreads];
		cg.enumerate(threads);
		for (int i = 0; i < numThreads; i++){
			if (threads[i].getThreadGroup().getName().equals(groupName)){
			    System.out.println("Thread " + threads[i].getName() + " running");
				cnt++;
			}
		}
		return cnt;
	}
	
	public static void print(String groupName){
		
		int cnt = 0;
		ThreadGroup cg = Thread.currentThread().getThreadGroup();
		int numThreads = cg.activeCount();
		Thread[] threads = new Thread[numThreads];
		cg.enumerate(threads);
		for (int i = 0; i < numThreads; i++){
			if (threads[i].getThreadGroup().getName().equals(groupName) && (threads[i].getName().length() < 20) ){
				System.out.println("Thread No:" + i + " = " + threads[i].getName() + " in group " + cg.getName());
			    cnt++;
			}
			else{
			   System.out.println("Skippping Thread No:" + i + " = " + threads[i].getName() + " in group " + cg.getName());
			}
		}
		System.out.println("Number of " + groupName + " threads found was " + cnt);
	}
}
